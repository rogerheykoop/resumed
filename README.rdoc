== Resumed

This app was made for the mystery-api challenge.

== The app itself

This app allows users to enter a (very basic and simplified) resume/CV;. Each user can enter multiple resume's.
A resume consists of two 1:n relationships with work histories and education histories.

There is a basic web app available, which I didn't spend too much time on since it fell outside of the assignment scope. Eventually this will turn into a an app which allows users to enter their resume's, and which allows brokers to anonimize the CV's. As such the web app needs to some more work.

But this exercise is mainly about the API so thats what the focus was mainly one. Given the time constraint of one week I put most effort into the API and its rspec tests + apipie documentation.

== The API

I chose to create a separate API instead of 'mixing' it with the web based part of the app. This is not exactly DRY but it allows us to give the API a separate development path with regards to the web app.

In this app I've used ActiveModel Serializers (AMS) to take care of the JSON generation.

The API has its own set of controllers. Authentication is done with Devise for bot the web and API parts. The API part however uses HTTP basic auth. The authentication is done with every call that you make; the API is stateless.

== Roles

There are three roles defined.
* The *admin* role can see and change any data
* The *user* role can see all data, change its own data
* The *guest* role is read only

Roles are enforced by CanCan and Rolify.

== Documentation for the API

Documentation is generated by APIPIE, visit http://localhost:3000/apipie
It still needs to be augmented with API return data; time constraints have prevented this.

== Getting started

<tt>rake db:seed</tt> will give you an admin user with a default e-mail address and password.

== rspec tests

The API is covered by rspec tests, however the coverage is not yet at 100% due to time constraints. You can find the specs in <tt>spec/apis</tt>

I've used a few custom supports that you can find in <tt>spec/supports</tt>.

== Todo

* For the future this app could be refactored to use the API for the web interface; this will DRY stuff up a lot and would make a single page app easier to implement.

* Better rspec coverage

* Test reports in HTML

* More complete validations

* Finish the web app

* More complete documentation